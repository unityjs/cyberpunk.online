// Generated by CoffeeScript 1.8.0

/*
  Copyright (c) 2014 clowwindy
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */
import crypto from "crypto"
import util from "util"
import { merge_sort } from "./merge_sort"

const int32Max = Math.pow(2, 32)

const cachedTables: { [key: string]: any[][] } = {}

export function getTable(key: string): any[][] {
  var result
  if (cachedTables[key]) {
    return cachedTables[key]
  }
  util.log("calculating ciphers")
  let table = new Array(256)
  const decrypt_table = new Array(256)
  const md5sum = crypto.createHash("md5")
  md5sum.update(key)
  //const hash = new Buffer(md5sum.digest(), "binary")
  const hash = new Buffer(md5sum.digest())
  const al = hash.readUInt32LE(0)
  const ah = hash.readUInt32LE(4)
  let i = 0
  while (i < 256) {
    table[i] = i
    i++
  }
  i = 1
  while (i < 1024) {
    table = merge_sort(table, function (x, y) {
      return ((ah % (x + i)) * int32Max + al) % (x + i) - ((ah % (y + i)) * int32Max + al) % (y + i)
    })
    i++
  }
  i = 0
  while (i < 256) {
    decrypt_table[table[i]] = i
    ++i
  }
  result = [table, decrypt_table]
  cachedTables[key] = result
  return result
}

function substitute(table: any[], buf: Buffer): Buffer {
  for (let i = 0; i < buf.length; ++i)
    buf[i] = table[buf[i]]
  return buf
}

const bytes_to_key_results: { [key: string]: Buffer[] } = {}

function EVP_BytesToKey(password: Buffer, key_len: number, iv_len: number) {
  const strKey = "" + password + ":" + key_len + ":" + iv_len
  if (bytes_to_key_results[strKey]) {
    return bytes_to_key_results[strKey]
  }
  const m: Buffer[] = []
  let i = 0
  let count = 0
  while (count < key_len + iv_len) {
    const md5 = crypto.createHash('md5')
    let data = password
    if (i > 0) {
      data = Buffer.concat([m[i - 1], password])
    }
    md5.update(data)
    const d = md5.digest()
    m.push(d)
    count += d.length
    i += 1
  }
  const ms = Buffer.concat(m)
  const key = ms.slice(0, key_len)
  const iv = ms.slice(key_len, key_len + iv_len)
  bytes_to_key_results[strKey] = [key, iv]
  return [key, iv]
}

const method_supported = {
  'aes-128-cfb': [16, 16],
  'aes-192-cfb': [24, 16],
  'aes-256-cfb': [32, 16],
  'bf-cfb': [16, 8],
  'camellia-128-cfb': [16, 16],
  'camellia-192-cfb': [24, 16],
  'camellia-256-cfb': [32, 16],
  'cast5-cfb': [16, 8],
  'des-cfb': [8, 8],
  'idea-cfb': [16, 8],
  'rc2-cfb': [16, 8],
  'rc4': [16, 0],
  'rc4-md5': [16, 16],
  'seed-cfb': [16, 16]
}

function create_rc4_md5_cipher(key: Buffer, iv: Buffer, op: number): crypto.Cipher | crypto.Decipher {
  const md5 = crypto.createHash('md5')
  md5.update(key)
  md5.update(iv)
  const rc4_key = md5.digest()
  if (op === 1) {
    return crypto.createCipheriv('rc4', rc4_key, '')
  } else {
    return crypto.createDecipheriv('rc4', rc4_key, '')
  }
}

export class Encryptor {
  key: string
  method: string
  iv_sent: boolean
  cipher_iv: Buffer
  cipher: crypto.Cipher | crypto.Decipher
  decipher: crypto.Cipher | crypto.Decipher
  encryptTable: any[]
  decryptTable: any[]

  constructor(key: string, method: string) {
    this.key = key
    this.method = method
    this.iv_sent = false
    if (this.method === 'table')
      this.method = null
    if (this.method != null) {
      this.cipher = this.get_cipher(this.key, this.method, 1, crypto.randomBytes(32))
    } else {
      [this.encryptTable, this.decryptTable] = getTable(this.key)
    }
  }

  get_cipher_len(method: string): number[] {
    return method_supported[method.toLowerCase()]
  }

  get_cipher(password: string, method: string, op: number, iv: Buffer): crypto.Cipher | crypto.Decipher {
    method = method.toLowerCase()
    const pwdBuf = new Buffer(password, 'binary')
    const m = this.get_cipher_len(method)
    if (m != null) {
      const [key, iv_] = EVP_BytesToKey(pwdBuf, m[0], m[1])
      if (iv == null) {
        iv = iv_
      }
      if (op === 1) {
        this.cipher_iv = iv.slice(0, m[1])
      }
      iv = iv.slice(0, m[1])
      if (method === 'rc4-md5') {
        return create_rc4_md5_cipher(key, iv, op)
      } else {
        if (op === 1) {
          return crypto.createCipheriv(method, key, iv)
        } else {
          return crypto.createDecipheriv(method, key, iv)
        }
      }
    }
  }

  encrypt(buf: Buffer): Buffer {
    if (this.method == null)
      return substitute(this.encryptTable, buf)
    const result = this.cipher.update(buf)
    if (this.iv_sent)
      return result
    this.iv_sent = true
    return Buffer.concat([this.cipher_iv, result])
  }

  decrypt(buf: Buffer): Buffer {
    if (this.method == null)
      return substitute(this.decryptTable, buf)
    if (this.decipher == null) {
      const decipher_iv_len = this.get_cipher_len(this.method)[1]
      const decipher_iv = buf.slice(0, decipher_iv_len)
      this.decipher = this.get_cipher(this.key, this.method, 0, decipher_iv)
      return this.decipher.update(buf.slice(decipher_iv_len))
    }
    return this.decipher.update(buf)
  }
}

export function encryptAll(password: string, method: string, op: number, data: Buffer) {
  method = method.toLowerCase()
  if (method === 'table') method = null
  if (method == null) {
    const [encryptTable, decryptTable] = getTable(password)
    if (op === 0)
      return substitute(decryptTable, data)
    else
      return substitute(encryptTable, data)
  } else {

    let cipher: crypto.Cipher | crypto.Decipher, iv: Buffer
    const result: Buffer[] = []
    const [keyLen, ivLen] = method_supported[method]
    const pwdBuf = new Buffer(password, 'binary')
    const [key, iv_] = EVP_BytesToKey(pwdBuf, keyLen, ivLen)
    if (op === 1) {
      iv = crypto.randomBytes(ivLen)
      result.push(iv)
    } else {
      iv = data.slice(0, ivLen)
      data = data.slice(ivLen)
    }
    if (method === 'rc4-md5')
      cipher = create_rc4_md5_cipher(key, iv, op)
    else if (op === 1)
      cipher = crypto.createCipheriv(method, key, iv)
    else
      cipher = crypto.createDecipheriv(method, key, iv)
    result.push(cipher.update(data))
    result.push(cipher.final())
    return Buffer.concat(result)
  }
}

